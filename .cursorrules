Server Management Directives:

1. Server Process Management:

   - Before starting a new server, always kill existing processes
   - Clean up commands:
     ```
     pkill -f "node.*3001"  # Kill Node.js processes on port 3001
     pkill -f "next"        # Kill any Next.js processes
     ```
   - Verify port is free using `lsof -i :3001`

2. Starting Server with Visible Output:

   - Use `run_terminal_cmd` with `is_background: true`
   - Command: `NODE_ENV=development DEBUG=* npm run start:dev`
   - This allows server output to be visible in Cursor while maintaining interaction
   - Keep track of the process ID for future management

3. Monitoring:

   - Watch for successful startup message: "Nest application successfully started"
   - Check for any error messages, especially port conflicts
   - Ensure database connections are established

4. Clean Shutdown:
   - When switching tasks or restarting, always clean up both Node.js and Next.js processes
   - Verify the port is freed before starting a new instance

API Specification Alignment Directives:

1. DTO-Database Field Mapping:

   - Always prioritize using transformers for field name mismatches
   - Create dedicated transformer class: `LegacyFieldTransformer`
   - Example transformation:
     ```typescript
     @Transform(({ value }) => transformLegacyField('focusText', 'anythingElse', value))
     focusText: string;
     ```
   - Keep original database schema intact to minimize database changes

2. Implementation Strategy:

   - First identify all mismatches between API spec and DTOs
   - Create mapping documentation of spec fields to database fields
   - Implement transformers in layers:
     ```typescript
     @LegacyFieldTransform({
       specToDb: {
         'focusText': 'anythingElse',
         'apiField': 'dbField'
       }
     })
     ```
   - Add clear comments indicating temporary nature of transforms

3. Monitoring and Documentation:

   - Track all field transformations in a central registry
   - Document each transformation with:
     - Original spec field name
     - Current database field name
     - Reason for mismatch
   - Mark these as technical debt for future cleanup

4. Future Migration Path:
   - Keep all spec-related transforms in dedicated files
   - Use naming convention: `legacy-field.transformer.ts`
   - Create migration plan for eventual alignment
   - Track performance impact of transformations

---

Testing

# Testing Guide

## Testing Patterns

### 1. Module Testing

We use `BaseModuleSpec` for consistent module testing. Located in `src/common/test/base-module.spec.ts`, it tests:

- Module compilation
- Service provision
- Controller provision
- Entity registration
- Service exports

```typescript
// Example usage
const moduleSpec = new BaseModuleSpec(YourModule, YourService, YourController, [
  YourEntity1,
  YourEntity2,
]);

describe('YourModule', () => {
  beforeAll(async () => {
    await moduleSpec.beforeAll();
  });

  afterAll(async () => {
    await moduleSpec.afterAll();
  });

  // This runs all standard module tests
  moduleSpec.runTests();
});
```

### 2. Mock Resources

Located in `src/common/test/`:

- `typeorm.mock.ts`: TypeORM mocking utilities
- `auth.mock.ts`: Authentication mocking

### 3. Database Testing

- Uses in-memory SQLite for tests
- Auto-synchronizes schema
- Isolated test database per suite

### 4. Repository Testing

Mock repositories are automatically created with common methods:

- find
- findOne
- save
- update
- delete
- createQueryBuilder (with common query methods)

### 5. Service Testing

Test services with mocked repositories:

```typescript
describe('YourService', () => {
  let service: YourService;
  let mockRepository: MockRepository<YourEntity>;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        YourService,
        {
          provide: getRepositoryToken(YourEntity),
          useValue: createMockRepository(),
        },
      ],
    }).compile();

    service = module.get<YourService>(YourService);
    mockRepository = module.get(getRepositoryToken(YourEntity));
  });
});
```

### 6. Controller Testing

Test controllers with mocked services:

```typescript
describe('YourController', () => {
  let controller: YourController;
  let mockService: MockType<YourService>;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      controllers: [YourController],
      providers: [
        {
          provide: YourService,
          useValue: createMockService(),
        },
      ],
    }).compile();

    controller = module.get<YourController>(YourController);
    mockService = module.get(YourService);
  });
});
```

## Best Practices

1. Use `BaseModuleSpec` for module tests
2. Mock external dependencies
3. Use in-memory SQLite for database tests
4. Clean up after tests using `afterAll`
5. Reset modules and clear mocks between tests
6. Test both success and error cases
7. Validate input/output types

## Common Test Files Structure

```
src/
├── common/
│   └── test/
│       ├── base-module.spec.ts    # Base module testing
│       ├── typeorm.mock.ts        # TypeORM mocks
│       └── auth.mock.ts           # Auth mocks
└── your-feature/
    ├── your-feature.module.ts
    ├── your-feature.module.spec.ts
    ├── your-feature.service.ts
    ├── your-feature.service.spec.ts
    ├── your-feature.controller.ts
    └── your-feature.controller.spec.ts
```

## Running Tests

```bash
# Run all tests
npm test

# Run specific test file
npm test path/to/file.spec.ts

# Run tests with coverage
npm run test:cov
```

# Testing Directive (Mandatory)

## Pre-Implementation Checklist

1. ALWAYS start by checking `src/common/test/` for existing test utilities
2. NEVER create custom mocks before checking `typeorm.mock.ts` and `auth.mock.ts`
3. For any new module test, MUST use `BaseModuleSpec` - no exceptions

## Implementation Order (Required)

1. Start with Module Testing using `BaseModuleSpec`
2. For Services:
   - Use `createMockRepository()` from typeorm.mock.ts
   - Follow exact structure from Service Testing pattern
   - Mock ALL external dependencies before writing tests
3. For Controllers:
   - Use `createMockService()`
   - Follow exact structure from Controller Testing pattern

## Common Mistakes to Avoid

1. ❌ Writing custom mocks when standard ones exist
2. ❌ Testing incrementally without full mock setup
3. ❌ Running tests before complete dependency mocking
4. ❌ Making iterative fixes without understanding full context

## Efficiency Rules

1. READ FIRST, CODE SECOND:
   - Review all existing test utilities
   - Understand full service/controller structure
   - Plan all required mocks before starting
2. ONE-TIME SETUP:
   - Set up ALL mocks before writing first test
   - Use repository pattern from guide exactly
   - Include all common methods from start
3. NO PARTIAL IMPLEMENTATIONS:
   - Complete all mock setups before any test
   - Include all standard methods in mocks
   - Test both success and error cases together
